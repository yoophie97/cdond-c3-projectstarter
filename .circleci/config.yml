version: 2.1
executors:
  node-executor:
    docker:
      - image: circleci/node:13.8.0
  aws-executor:
    docker:
      - image: amazon/aws-cli
  python-executor:
    docker:
      - image: python:3.7-alpine3.16

commands:
  install-dep-python-executor:
    description: Install the necessary packages for python image executor
    steps:
      - run:
          name: Install dependencies
          command: |
            apk add --update ansible
            pip install awscli
            apk add --update --no-cache curl tar gzip nodejs npm
  
  install-dep-aws-executor:
    description: Install the necessary packages for aws executor
    steps:
      - run:
          name: Install dependencies
          command: |
            yum -y install wget tar gzip python37
            curl -sL https://rpm.nodesource.com/setup_12.x | bash -
            yum install -y nodejs
          
  install-dep-node-executor:
    description: Install the necessary packages for node executor
    steps:
      - run:
          name: Install dependencies
          command: |
            curl --insecure https://bootstrap.pypa.io/pip/3.5/get-pip.py -o get-pip.py
            python3 get-pip.py
            pip install awscli

  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    parameters:
      workflow_id:
        type: string  
    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            echo  echo "Destroying environment: << parameters.workflow_id >> "
            aws s3 rm s3://udapeople-<<parameters.workflow_id>> --recursive
            aws cloudformation delete-stack --stack-name udapeople-backend-<<parameters.workflow_id>>
            aws cloudformation delete-stack --stack-name udapeople-frontend-<<parameters.workflow_id>>

  revert-migrations:
    description: Revert the last migration if successfully run in the current workflow.
    parameters:
      workflow_id:
        type: string     
    steps:
      - run:
          name: Revert migrations
          when: on_fail
          command: |
            # Curl command here to see if there was a successful migration associated with the workflow id, store result in SUCCESS variable
            # export SUCCESS_URL=
            if curl --insecure "https://kvdb.io/Av2gLHMmaQRinmszBBonh2/migration_<<parameters.workflow_id>>" 
            then
              cd ~/project/backend
              npm install --legacy-peer-deps
              npm run migrations:revert
              #  Add revert code here. You can find this in the Getting Started section.
              # exit 1
            fi
      
jobs:
  build-frontend:
    executor: node-executor
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          command: |
            cd frontend
            npm install
            npm run build
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build

  build-backend:
    executor: node-executor
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end build
          command: |
            cd backend
            npm install
            npm run build
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build

  test-frontend:
    executor: node-executor
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Frontend test
          command: |
            cd frontend
            npm install
            npm run test
                
  test-backend:
    executor: node-executor
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Backend test
          command: |
            cd backend
            npm install
            npm run test

  scan-frontend:
    executor: node-executor
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Scan frontend dependencies
          command: |
            cd frontend
            npm install
            npm audit fix --audit-level=critical --force
            npm audit --audit-level=critical


  scan-backend:
    executor: node-executor
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Scan backend dependencies
          command: |
            cd backend
            npm install
            npm audit fix --audit-level=critical --force
            npm audit fix --force
            npm audit --audit-level=critical

  deploy-infrastructure:
    executor: aws-executor
    steps:
      - checkout
      - install-dep-aws-executor
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --tags project=udapeople \
              --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  
      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --tags project=udapeople \
              --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"
      - run:
          name: Add back-end ip to ansible inventory
          command: |
            aws ec2 describe-instances \
              \
                --query 'Reservations[*].Instances[*].PublicIpAddress' \
                --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" \
                --output text > ~/project/.circleci/ansible/inventory.txt
      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/ansible/inventory.txt
      - destroy-environment:
          workflow_id:  ${CIRCLE_WORKFLOW_ID:0:7}

  configure-infrastructure:
    executor: python-executor
    steps:
      - checkout
      - attach_workspace:
          at: ~/
      - add_ssh_keys:
          fingerprints: ["23:da:d1:22:19:74:7d:a5:b8:c7:76:81:ba:fc:b4:7d"]
      - install-dep-python-executor
      - run:
          name: Configure server
          command: |
            cd .circleci/ansible
            ansible-playbook -i inventory.txt configure-server.yml
      - destroy-environment:
          workflow_id:  ${CIRCLE_WORKFLOW_ID:0:7}  

  run-migrations:
    executor: python-executor
    steps:
      - checkout
      - attach_workspace:
          at:  ~/.circleci/ansible/inventory.txt
      - run:
          name: Install Dependencies
          command: |
            apk add --update --no-cache tar gzip nodejs npm aws-cli curl

      - restore_cache:
          keys: [backend-build]
      
      - run:
          name: Run migrations
          command: |
            cd backend
            npm install
            npm run migrations > migrations_dump.txt
      - run:
          name: Send migration results to memstash
          command: |   
            if grep -q "has been executed successfully." ~/project/backend/migrations_dump.txt
            then
              # If you are using kvdb.io, generate the bucket ID "9GE4jRtKznmVKRfvdBABBe" in your local terminal first
              curl --insecure https://kvdb.io/Av2gLHMmaQRinmszBBonh2/migration_${CIRCLE_WORKFLOW_ID:0:7}  -d '1'
            fi
      - revert-migrations:
          workflow_id:  ${CIRCLE_WORKFLOW_ID:0:7}
      - destroy-environment:
          workflow_id:  ${CIRCLE_WORKFLOW_ID:0:7} 

  deploy-frontend:
    executor: aws-executor
      # Docker image here that supports AWS CLI
    steps:
      # Checkout code from git
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - install-dep-aws-executor
      - attach_workspace:
          at: ~/
      - run:
          name: Get backend url
          command: |
            # your code here
            export BACKEND_IP=$(aws ec2 describe-instances \
              \
                --query 'Reservations[*].Instances[*].PublicIpAddress' \
                --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" \
                --output text
              )
            export API_URL="http://${BACKEND_IP}:3030"
            echo "${API_URL}"
            echo "API_URL = ${API_URL}"
            echo API_URL="http://${BACKEND_IP}:3030" >> frontend/.env
            cat frontend/.env
      - run:
          name: Deploy frontend objects
          command: |
            cd frontend
            npm install
            npm run build
            tar -czvf artifact-"${CIRCLE_WORKFLOW_ID:0:7}".tar.gz dist
            aws s3 cp dist s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} --recursive
            # your code here
      - destroy-environment:
          workflow_id:  ${CIRCLE_WORKFLOW_ID:0:7}
      - revert-migrations:
          workflow_id:  ${CIRCLE_WORKFLOW_ID:0:7}

  deploy-backend:
    executor: python-executor
      # Docker image here that supports Ansible
    steps:
      - checkout
      - attach_workspace:
          at: ~/
      - add_ssh_keys:
          fingerprints: ["23:da:d1:22:19:74:7d:a5:b8:c7:76:81:ba:fc:b4:7d"]
      - install-dep-python-executor
          # your code here
      - run:
          name: Deploy backend
          command: |
            cd backend
            echo "NODE_ENV=production" >> .env
            echo "BACKEND_PORT=3030" >> .env
            echo "TYPEORM_CONNECTION = ${TYPEORM_CONNECTION}" >> .env
            echo "TYPEORM_ENTITIES = ${TYPEORM_ENTITIES}" >> .env
            echo "TYPEORM_HOST = ${TYPEORM_HOST}" >> .env
            echo "TYPEORM_PORT = ${TYPEORM_PORT}" >> .env
            echo "TYPEORM_USERNAME = ${TYPEORM_USERNAME}" >> .env
            echo "TYPEORM_PASSWORD = ${TYPEORM_PASSWORD}" >> .env
            echo "TYPEORM_DATABASE = ${TYPEORM_DATABASE}" >> .env
            echo "TYPEORM_MIGRATIONS = ${TYPEORM_MIGRATIONS}" >> .env
            echo "TYPEORM_MIGRATIONS_DIR = ${TYPEORM_MIGRATIONS_DIR}" >> .env
            cat .env
            npm i --legacy-peer-deps
            npm run build
            cd ..
            tar -C backend -czvf artifact.tar.gz .
            mkdir -p ~/project/.circleci/ansible/roles/deploy/files
            cp artifact.tar.gz .circleci/ansible/roles/deploy/files
            cd .circleci/ansible
            echo "Contents  of the inventory.txt file is -------"
            cat inventory.txt
            ansible-playbook -i inventory.txt deploy-backend.yml
            # your code here
      - destroy-environment:
          workflow_id:  ${CIRCLE_WORKFLOW_ID:0:7}
      - revert-migrations:
          workflow_id:  ${CIRCLE_WORKFLOW_ID:0:7}

  smoke-test:
    executor: python-executor
      # Lightweight Docker image
    steps:
      # Checkout code from git
      - checkout
      - install-dep-python-executor
          # your code here
      - run:
          name: Backend smoke test.
          command: |
            export BACKEND_IP=$(aws ec2 describe-instances \
              \
                --query 'Reservations[*].Instances[*].PublicIpAddress' \
                --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" \
                --output text
              )
            export API_URL="http://${BACKEND_IP}:3030"
            echo "${API_URL}/api/status"
            #if curl "${API_URL}/api/status" | grep "ok"
            #then
            #    return 0
            #else
            #    return 1
            #fi
            # your code here
      - run:
          name: Frontend smoke test.
          command: |
            URL="http://udapeople-${CIRCLE_WORKFLOW_ID:0:7}.s3-website-us-east-1.amazonaws.com/#/employees"            
            echo ${URL} 
            if curl -s ${URL} | grep "Welcome"
            then
                # Change this to 0 after the job fails
              return 0
            else
              return 1
            fi
      - destroy-environment:
          workflow_id:  ${CIRCLE_WORKFLOW_ID:0:7}
      - revert-migrations:
          workflow_id:  ${CIRCLE_WORKFLOW_ID:0:7}

  cloudfront-update:
    executor: aws-executor
      # Docker image here that supports AWS CLI
    steps:
      - checkout
      - install-dep-aws-executor
        # your code here
      - run:
          name: Update cloudfront distribution
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/cloudfront.yml \
              --stack-name InitialStack \
              --parameter-overrides WorkflowID="${CIRCLE_WORKFLOW_ID:0:7}" \
              --tags project=udapeople
      - destroy-environment:
          workflow_id:  ${CIRCLE_WORKFLOW_ID:0:7}
      - revert-migrations:
          workflow_id:  ${CIRCLE_WORKFLOW_ID:0:7}


workflows:
  default:
    jobs:
      - build-frontend
      - build-backend
      - test-frontend:
          requires: [build-frontend]
      - test-backend:
          requires: [build-backend]
      - scan-backend:
          requires: [build-backend]
      - scan-frontend:
          requires: [build-frontend]
      - deploy-infrastructure:
          requires: [test-frontend, test-backend, scan-frontend, scan-backend]
          filters:
            branches:
              only: [master]
      - configure-infrastructure:
          requires: [deploy-infrastructure]
      - run-migrations:
          requires: [configure-infrastructure]
      - deploy-frontend:
          requires: [run-migrations]
      - deploy-backend:
          requires: [run-migrations]
      - smoke-test:
          requires: [deploy-backend, deploy-frontend]
      - cloudfront-update:
          requires: [smoke-test]
      #- cleanup:
      #    requires: [cloudfront-update]